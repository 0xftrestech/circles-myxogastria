#!/usr/bin/env node
/* eslint no-console: 0 */

const glob = require('glob');
const path = require('path');

const LOCALES_FILE_EXT = 'json';
const LOCALES_FILE_BASE = path.join(__dirname, '..', 'locales');

function getAllLocaleFiles() {
  return new Promise((resolve, reject) => {
    glob(
      path.join(LOCALES_FILE_BASE, `*.${LOCALES_FILE_EXT}`),
      {},
      (error, filePaths) => {
        if (error) {
          reject(error);
        } else {
          const locales = filePaths.reduce((acc, filePath) => {
            const locale = filePath
              .split('/')
              .pop()
              .replace(`.${LOCALES_FILE_EXT}`, '');
            acc[locale] = require(filePath);
            return acc;
          }, {});
          resolve(locales);
        }
      },
    );
  });
}

console.log('Check locale files');

function getAllKeys(locales, locale) {
  return Object.keys(locales[locale]).reduce((acc, rootKey) => {
    Object.keys(locales[locale][rootKey]).forEach((key) => {
      const localeKey = `${rootKey}.${key}`;
      if (!acc.includes(localeKey)) {
        acc.push(localeKey);
      }
    });
    return acc;
  }, []);
}

getAllLocaleFiles().then((locales) => {
  // Collect all keys together
  const foundKeys = Object.keys(locales).reduce((acc, locale) => {
    const localeKeys = getAllKeys(locales, locale);
    localeKeys.forEach((localeKey) => {
      if (!acc.includes(localeKey)) {
        acc.push(localeKey);
      }
    });
    console.log(`Found locale "${locale}" with ${localeKeys.length} root keys`);
    return acc;
  }, []);

  // Check for missing keys in each locale
  let errors = 0;
  Object.keys(locales).forEach((locale) => {
    const localeKeys = getAllKeys(locales, locale);
    foundKeys.forEach((foundKey) => {
      const [rootKey, key] = foundKey.split('.');
      if (!localeKeys.includes(foundKey)) {
        console.log(`Missing key "${rootKey}.${key}" in locale "${locale}"`);
        errors += 1;
      } else if (
        typeof locales[locale][rootKey][key] === 'string' &&
        locales[locale][rootKey][key].length === 0
      ) {
        console.log(`Empty key "${rootKey}.${key}" in locale "${locale}"`);
        errors += 1;
      }
    });
  });

  console.log(`Found ${errors} errors total`);
  process.exitCode = errors > 0 ? 1 : 0;
});
