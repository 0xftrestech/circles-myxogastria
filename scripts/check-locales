#!/usr/bin/env node

/* eslint no-console: 0 */

const glob = require('glob');
const path = require('path');

const LOCALES_FILE_EXT = 'json';
const LOCALES_FILE_BASE = path.join(__dirname, '..', 'locales');

function getAllLocaleFiles() {
  return new Promise((resolve, reject) => {
    glob(
      path.join(LOCALES_FILE_BASE, `*.${LOCALES_FILE_EXT}`),
      {},
      (error, filePaths) => {
        if (error) {
          reject(error);
        } else {
          const locales = filePaths.reduce((acc, filePath) => {
            const locale = filePath
              .split('/')
              .pop()
              .replace(`.${LOCALES_FILE_EXT}`, '');
            acc[locale] = require(filePath);
            return acc;
          }, {});

          resolve(locales);
        }
      },
    );
  });
}

console.log('Check locale files');

getAllLocaleFiles().then((locales) => {
  // Collect all keys together
  const foundKeys = [];
  Object.keys(locales).forEach((locale) => {
    const keys = Object.keys(locales[locale]);
    console.log(`Found locale "${locale}" with ${keys.length} keys`);

    keys.forEach((key) => {
      if (!foundKeys.includes(key)) {
        foundKeys.push(key);
      }
    });
  });

  // Check for missing keys in each locale
  let errors = 0;
  Object.keys(locales).forEach((locale) => {
    const keys = Object.keys(locales[locale]);

    foundKeys.forEach((key) => {
      if (!keys.includes(key)) {
        console.log(`Missing key "${key}" in locale "${locale}"`);
        errors += 1;
      } else if (locales[locale][key].length === 0) {
        console.log(`Empty key "${key}" in locale "${locale}"`);
        errors += 1;
      }
    });
  });

  console.log(`Found ${errors} errors total`);
  process.exitCode = errors > 0 ? 1 : 0;
});
